# 计算蓝筹股 年报发布后股息率的变化，寻求做T的策略
import time

import pandas as pd

def interst(stockCode):
    intersts = pd.read_csv("D:\gp\\"+stockCode+"\interest.csv")
    interstStock = pd.DataFrame(intersts,  columns=['timestamp',str(stockCode)])
    return interstStock.sort_values(by=['timestamp'], ascending=[True]).reset_index(drop=True)

def calDividendYield(stockCode,type):
    original = pd.read_csv("D:\gp\\"+stockCode+"\\"+stockCode+"-"+type+".csv")
    #print(original.index)
    # 取某几列数据
    dayPrices = pd.DataFrame(original,  columns=['timestamp','day','open','high','low', 'close'])
    # open 列数据 乘以10
    #result = dayPrices['open'].apply(lambda x:float(x)*10)
    #print(result)
    # 对列数据左连接
    simpleInterest = interst(stockCode)

    priceWithInterest = pd.merge(dayPrices,simpleInterest,how='left',on=['timestamp', 'timestamp'])
    print(priceWithInterest)
    #priceWithInterest =pd.concat([dayPrices,simpleInterest],axis=1,join='outer')
    #填补空格
    i=0
    simpleInterestArray = simpleInterest.values
    print('simpleInterestArray')
    print(len(simpleInterestArray))
    j = len(simpleInterestArray)
    print('j:' +str(j))
    while i < j :
        beforeTimeStamp = simpleInterestArray[i][0]
        if int(i) == int(j-1):
            afterTimeStamp = int(round(time.time()*1000))
        else:
            afterTimeStamp = simpleInterestArray[i+1][0]
        copyInterest = simpleInterestArray[i][1]
        print('i:'+str(i)+' beforeTimeStamp:'+str(beforeTimeStamp)+' afterTimeStamp:'+str(afterTimeStamp))
        indx = priceWithInterest[(priceWithInterest['timestamp'] > beforeTimeStamp) & (priceWithInterest['timestamp']<=afterTimeStamp)].index
        print(indx)
        if indx.values.size !=0:
            priceWithInterest.at[indx,stockCode]=copyInterest
            print('copy interest' +str(copyInterest))

        i += 1

    # 插入空白列，并计算股息率
    priceWithInterest['DividendYield']=None
    priceWithInterest['DividendYield'] = priceWithInterest.apply(lambda x: '%.2f' % (10*x[stockCode] / x['close']), axis=1)

    print(priceWithInterest)
    priceWithInterest.to_csv("D:\gp\\"+stockCode+"\\"+stockCode+"priceWithInterest.csv")

def mergeDiffStockByCol(stockCodeArray,column):
    stock0 = pd.read_csv("D:\gp\\"+stockCodeArray[0]+"\\"+stockCodeArray[0]+"priceWithInterest.csv")
    stock0DividendYield = pd.DataFrame(stock0,  columns=['timestamp','day',column]).rename(columns={column:stockCodeArray[0]+column})
    filestr = stockCodeArray[0]
    i=1
    while i<len(stockCodeArray):
        stockCodeI = stockCodeArray[i]
        stockI= pd.read_csv("D:\gp\\"+stockCodeI+"\\"+stockCodeI+"priceWithInterest.csv")
        stockIDividendYield = pd.DataFrame(stockI,  columns=['timestamp',column]).rename(columns={column:stockCodeI+column})
        stock0DividendYield = pd.merge(stock0DividendYield,stockIDividendYield,how='left',on=['timestamp', 'timestamp'])
        filestr += stockCodeI+'-'
        i += 1

    stock0DividendYield.to_csv("D:\gp\\"+filestr+column+".csv")

# 主模块
if __name__ == "__main__":
    # 工商银行
    calDividendYield('SH601398','normal')
    # 中国银行
    #calDividendYield('SH601988','normal')
    # 建设银行
    #calDividendYield('SH601939','normal')
    # 生产 2只股票的股息率合并表格
    #mergeDiffStockByCol(['SH601398','SH601988','SH601939'],'DividendYield')
    #mergeDiffStockByCol(['SH601398','SH601988','SH601939'],'close')